AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS REST API with CORS

Outputs:

  StackRegion:
    Value: !Ref AWS::Region
  ItemTableName:
    Value: !Ref ItemTable
  ItemsFnCreateArn:
    Value: !GetAtt ItemsFnCreate.Arn
  ItemsFnIndexArn:
    Value: !GetAtt ItemsFnIndex.Arn
  InvokeUrlProd:
    Value: !Sub https://${AwsCorsApi}.execute-api.${AWS::Region}.amazonaws.com/prod

Resources:

  ############
  ## TABLES ##
  ############

  ItemTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Name
        Type: String

  ###############
  ## Functions ##
  ###############

  ItemsFnCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/items.create
      Runtime: nodejs6.10
      CodeUri: ./package/aws-cors-api.zip
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          ITEM_TABLE: !Ref ItemTable

  ItemsFnIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/items.index
      Runtime: nodejs6.10
      CodeUri: ./package/aws-cors-api.zip
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          ITEM_TABLE: !Ref ItemTable

  ItemsFnShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/items.show
      Runtime: nodejs6.10
      CodeUri: ./package/aws-cors-api.zip
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          ITEM_TABLE: !Ref ItemTable

  ItemsFnUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/items.update
      Runtime: nodejs6.10
      CodeUri: ./package/aws-cors-api.zip
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          ITEM_TABLE: !Ref ItemTable

  ItemsFnDestroy:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/items.destroy
      Runtime: nodejs6.10
      CodeUri: ./package/aws-cors-api.zip
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          ITEM_TABLE: !Ref ItemTable

  #########
  ## API ##
  #########

  AwsCorsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AWS CORS API

  ItemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: items
      RestApiId: !Ref AwsCorsApi
      ParentId: !GetAtt AwsCorsApi.RootResourceId

  ItemsMemberResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: '{itemName}'
      RestApiId: !Ref AwsCorsApi
      ParentId: !Ref ItemsResource

  ItemsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsResource
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ItemsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnCreate.Arn}/invocations

  ItemsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnIndex.Arn}/invocations

  ItemsMemberOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsMemberResource
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ItemsMemberGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsMemberResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnShow.Arn}/invocations

  ItemsMemberPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsMemberResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnUpdate.Arn}/invocations

  ItemsMemberPatch:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PATCH
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsMemberResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnUpdate.Arn}/invocations

  ItemsMemberDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      RestApiId: !Ref AwsCorsApi
      ResourceId: !Ref ItemsMemberResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFnDestroy.Arn}/invocations

  #################
  ## Permissions ##
  #################

  ItemsPostInvokeItemsFnCreate:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/POST/items
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnCreate.Arn

  ItemsGetInvokeItemsFnIndex:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/GET/items
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnIndex.Arn

  ItemsMemberGetInvokeItemsFnShow:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/GET/items/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnShow.Arn

  ItemsMemberPutInvokeItemsFnUpdate:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/PUT/items/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnUpdate.Arn

  ItemsMemberPatchInvokeItemsUpdate:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/PATCH/items/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnUpdate.Arn

  ItemsMemberDeleteInvokeItemsFnDestroy:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AwsCorsApi}/*/DELETE/items/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ItemsFnDestroy.Arn


  #################
  ## Deployments ##
  #################

  DeployAwsCorsApi:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AwsCorsApi
      StageName: prod
    DependsOn:
      - ItemsOptions
      - ItemsPost
      - ItemsGet
      - ItemsMemberOptions
      - ItemsMemberGet
      - ItemsMemberPut
      - ItemsMemberPatch
      - ItemsMemberDelete
